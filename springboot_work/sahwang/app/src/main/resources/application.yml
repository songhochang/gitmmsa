spring:
  application:
    name: SaHwang
#  sql:
#    init:
#      mode: always

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    #    url: jdbc:mariadb://maria_container:3306/pmh
    url: jdbc:mysql://192.168.0.216:3307/fourhwang
    username: root
    password: 1234

  jpa:
    hibernate:
      ddl-auto: create
    properties:
      hibernate.format_sql: true
    show-sql: true
    open-in-view: false
#    defer-datasource-initialization: true


# for kafka

# business logic service with kafka topic
purchase-service:
  purchase-created-topic-name: purchase-created
  purchase-cancelled-topic-name: purchase-cancelled

payment-service:
  payment-paid-topic-name: payment-paid

# kafka config
kafka-config:
  bootstrap-servers: localhost:19092, localhost:29092, localhost:39092
  schema-registry-url-key: schema.registry.url
  schema-registry-url: http://localhost:8081
  num-of-partitions: 3
  replication-factor: 3

kafka-producer-config:
  key-serializer-class: org.apache.kafka.common.serialization.StringSerializer
  value-serializer-class: io.confluent.kafka.serializers.KafkaAvroSerializer
  compression-type: snappy
  acks: all
  batch-size: 16384
  batch-size-boost-factor: 100
  linger-ms: 5
  request-timeout-ms: 60000
  retry-count: 5

kafka-consumer-config:
  key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
  value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
  # custom related business logic
  purchase-consumer-group-id: purchase-topic-consumer
  payment-consumer-group-id: payment-topic-consumer
  # custom related business logic
  auto-offset-reset: earliest
  specific-avro-reader-key: specific.avro.reader
  specific-avro-reader: true
  batch-listener: true
  auto-startup: true
  concurrency-level: 3
  session-timeout-ms: 10000
  heartbeat-interval-ms: 3000
  max-poll-interval-ms: 300000
  max-poll-records: 500
  max-partition-fetch-bytes-default: 1048576
  max-partition-fetch-bytes-boost-factor: 1
  poll-timeout-ms: 150
